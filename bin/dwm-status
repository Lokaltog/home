#!/usr/bin/env python

import datetime
import os
import re
import subprocess
import urllib.request
import xml.dom.minidom

def run_cmd(cmd):
	return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].decode("utf-8").strip()

class Statusbar:
	_segments = []

	def __init__(self, *args):
		for arg in args:
			segment = arg.get_segment()

			if segment is not None:
				self._segments.append(segment)

	def __str__(self):
		return ' '.join(self._segments)

class Segment:
	icons = {
		'vol_mute': '',
		'vol_low': '',
		'vol_medium': '',
		'vol_high': '',
		'music': '',
		'mail': '',
		'mail_inverted': '',
		'date': '',
		'time': '',
	}
	bars = {
		'round-regular': '',
		'round-candycane': '',
	}
	colors = {
		'normal': '\x01',
		'urgent': '\x03',
		'error': '\x04',
		'white': '\x06',
		'warning': '\x07',
	}

	_icon = None
	_icon_color = None
	_text = None
	_text_color = None

	def get_bar(self, percent, length=10, type='round-regular'):
		bar = []
		fill_length = round(percent / 100 * length)

		chars_empty = self.bars[type][0:3]
		chars_filled = self.bars[type][3:7]

		if not fill_length:
			# Empty bar
			bar.append(chars_empty[0])
			bar.append(chars_empty[1] * (length - 1))
			bar.append(chars_empty[2])
		elif fill_length == length:
			# Full bar
			bar.append(chars_filled[0])
			bar.append(chars_filled[1] * (length - 1))
			bar.append(chars_filled[2])
		else:
			# Partially filled bar
			bar.append(chars_filled[0])
			bar.append(chars_filled[1] * (fill_length - 1))
			bar.append(chars_filled[3])

			bar.append(chars_empty[1] * (length - fill_length - 1))
			bar.append(chars_empty[2])

		return ''.join(bar)

	def set_icon(self, icon, color=None):
		self._icon = self.icons.get(icon)

		if color is not None:
			self._icon_color = self.colors.get(color)

	def set_text(self, text, color=None):
		self._text = text

		if color is not None:
			self._text_color = self.colors.get(color)

	def get_segment(self):
		segment = []

		if self._icon:
			part = ''
			if self._icon_color is not None:
				part += self._icon_color
				part += ' '
			else:
				part += self.colors['white']

			part += self._icon

			segment.append(part)

		if self._text:
			part = ''
			if self._icon_color is not None and self._text_color is None:
				part += ''
			elif self._text_color is None:
				part += self.colors['normal']
			else:
				part += self._text_color

			part += self._text

			segment.append(part)

		segment.append(self.colors['normal'])

		return ' '.join(segment)

class MusicSegment(Segment):
	trim_length = 60

	def __init__(self):
		Segment.__init__(self)

		self.set_icon('music')
		self.set_text('Not playing')

		try:
			cmd = run_cmd(['timeout', '1s', 'mpc'])
		except OSError:
			return

		if 'playing' in cmd:
			text = []

			(playing, info) = cmd.split('\n')
			percent = int(re.search('(\d+)%', info).group(1))

			if len(playing) > self.trim_length:
				playing = playing[:self.trim_length] + '...'

			(current, total) = re.findall('(\d+:\d+)', info)

			text.extend([
				playing,
				'({1})'.format(total),
				self.draw_bar(percent),
				current,
			])

			self.set_text(' '.join(text))

class VolumeSegment(Segment):
	def __init__(self):
		Segment.__init__(self)

		try:
			cmd = run_cmd(['amixer', 'get', 'Master'])
		except OSError:
			return

		try:
			volume = int(re.search('\[(\d+)%\]', cmd).group(1))
			muted = re.search('\[(on|off)\]', cmd).group(1) == 'off'
		except AttributeError:
			self.set_icon('vol_mute', 'warning')
			self.set_text('No sound')

			return

		if muted:
			self.set_icon('vol_mute', 'warning')
			self.set_text(self.get_bar(0))

			return

		self.set_icon('vol_high')
		if volume < 50:
			self.set_icon('vol_medium')
		if volume < 10:
			self.set_icon('vol_low')

		self.set_text(self.get_bar(volume))

class MailSegment(Segment):
	def __init__(self):
		Segment.__init__(self)

		self.set_icon('mail')
		self.set_text('N/A')

		unread = []
		hl = False

		try:
			for account in open(os.environ['XDG_CONFIG_HOME'] + '/gmailaccounts', encoding='utf-8'):
				(url, user, passwd) = account.split('|')

				auth_handler = urllib.request.HTTPBasicAuthHandler()
				auth_handler.add_password(realm='New mail feed', uri='https://mail.google.com/', user=user, passwd=passwd)
				opener = urllib.request.build_opener(auth_handler)
				urllib.request.install_opener(opener)

				request = urllib.request.urlopen(url)
				dom = xml.dom.minidom.parseString(request.read())
				count = dom.getElementsByTagName('fullcount')[0].childNodes[0].data

				if int(count) > 0:
					hl = True

				unread.append(count)
		except (IOError, ValueError, KeyError):
			return

		if hl:
			self.set_icon('mail', 'error')

		self.set_text(' / '.join(unread))


class DateSegment(Segment):
	def __init__(self):
		Segment.__init__(self)

		self.set_icon('date')
		self.set_text(datetime.datetime.now().strftime('%Y-%m-%d'))

class TimeSegment(Segment):
	def __init__(self):
		Segment.__init__(self)

		self.set_icon('time')
		self.set_text(datetime.datetime.now().strftime('%R'))

sb = Statusbar(
	MusicSegment(),
	VolumeSegment(),
	MailSegment(),
	DateSegment(),
	TimeSegment()
)

print(sb)
