# Author: Kim Silkeb√¶kken <kim.silkebaekken+github@gmail.com>
# Source: https://github.com/Lokaltog/sync
# Environment variables {{{
	# Command history {{{
		export HISTFILE=~/.zshhist
		export HISTSIZE=10000
		export SAVEHIST=$HISTSIZE
	# }}}
	# Colors {{{
		export GREP_COLORS="38;5;230:sl=38;5;240:cs=38;5;100:mt=38;5;161:fn=38;5;197:ln=38;5;212:bn=38;5;44:se=38;5;166"
		eval `dircolors ~/sync/modules/dircolors/LS_COLORS`
	# }}}
	# Locale {{{
		export LANG="en_US.utf8"
		export LC_CTYPE="nb_NO.utf8"
		export LC_NUMERIC="nb_NO.utf8"
		export LC_TIME="nb_NO.utf8"
		export LC_COLLATE="nb_NO.utf8"
		export LC_MONETARY="nb_NO.utf8"
		export LC_MESSAGES="en_US.utf8"
		export LC_PAPER="nb_NO.utf8"
		export LC_NAME="nb_NO.utf8"
		export LC_ADDRESS="nb_NO.utf8"
		export LC_TELEPHONE="nb_NO.utf8"
		export LC_MEASUREMENT="nb_NO.utf8"
		export LC_IDENTIFICATION="nb_NO.utf8"
		export LC_ALL=""
	# }}}
	# Build settings {{{
		export CFLAGS="-march=native -mtune=native -O3 -pipe"
		export CXXFLAGS="$CFLAGS"
		export LDFLAGS="-Wl,--hash-style=gnu -Wl,--as-needed"
		export MAKEFLAGS="-j6"
	# }}}
	# Applications {{{
		export PAGER="vimpager"
		export MANPAGER="vimpager"
		export EDITOR="vim"
		export VISUAL="vim"
		export BROWSER="chromium"
		export WINEARCH="win32"
	# }}}
	# Paths {{{
		export PATH="$HOME/sync/bin:/usr/bin/vendor_perl:$PATH" # Add sync/bin to path
		export NODE_PATH="/usr/lib/node_modules:$NODE_PATH"
		export PROJECT_HOME="$HOME/projects" # Set project path for virtualenvwrapper
	# }}}
# }}}
# Load plugins {{{
	source ~/.zsh/git-flow-completion.zsh
	source ~/.zsh/zsh-syntax-highlighting-filetypes.zsh
# }}}
# Zsh options {{{
	typeset -g -A key
	typeset -U path cdpath fpath manpath

	setopt auto_cd # Change dir without cd
	setopt extended_glob # Regex globbing
	setopt print_exit_value # Print exit value of programs with non-zero exit status
	setopt notify # Report the status if background jobs immediately
	setopt complete_in_word # Not just at the end
	setopt always_to_end # When complete from middle, move cursor
	setopt no_match # Show error if pattern has no matches
	setopt no_beep # Disable beeps
	setopt list_packed # Compact completion lists
	setopt list_types # Show types in completion
	setopt rec_exact # Recognize exact, ambiguous matches
	setopt hist_verify # When using ! cmds, confirm first
	setopt hist_ignore_all_dups # Ignore dups in command history
	setopt hist_ignore_space # Don't add commands prepended by whitespace to history
	setopt append_history # Allow multiple sessions to append to the history file
	setopt extended_history # Save additional info to history file
	setopt inc_append_history # Append commands to history immediately
	setopt prompt_subst # Enable variable substitution in prompt
	setopt correct # Command correction
	setopt dvorak # Correkt dvorak typing mistakes
	setopt short_loops # Allow short loops
# }}}
# Keybindings {{{
	bindkey -v

	bindkey '^?' backward-delete-char
	bindkey '^[[1~' beginning-of-line # Home
	bindkey '^[[4~' end-of-line # End
	bindkey '^[[3~' delete-char # Del
	bindkey '^[[5~' up-line-or-history  # Page Up
	bindkey '^[[6~' down-line-or-history # Page Down
	bindkey "^[[7~" beginning-of-line # Home
	bindkey "^[[8~" end-of-line # End
	bindkey '^[[A' up-line-or-search # Up
	bindkey '^[[D' backward-char # Left
	bindkey '^[[B' down-line-or-search # Down
	bindkey '^[[C' forward-char # Right
	bindkey "^[OH" beginning-of-line
	bindkey "^[OF" end-of-line
# }}}
# Aliases {{{
	# Vimpager aliases {{{
		alias less=$PAGER
	# }}}
	# General aliases {{{
		alias sudo="sudo -E"
		alias -- +="sudo"
		alias sv="+ vim"
		alias l="ls -ABFhovX --color=auto --group-directories-first --time-style=long-iso"
		alias ls="ls --color=auto"
		alias lsa="l"
		alias sus="+ -s"
		alias grep="grep --color=auto"
		alias sd="+ shutdown -h now"
		alias rb="+ reboot"
		alias p="+ pacman"
		alias pr="packer --noedit"
		alias sshfs="sshfs -o reconnect,nosuid,nodev,allow_other,uid=1000,gid=100"
		alias df="df -h"
		alias du="du -h"
		alias rmr="rm -rf"
		alias mv="nocorrect mv -iv"
		alias cp="nocorrect cp -iv"
		alias mkdir="nocorrect mkdir -vp"
		alias chmod="chmod -v"
		alias chown="chown -v"
	# }}}
	# Default sudo commands {{{
		for cmd in mount ifconfig pacman chmod chown rc.d; do
			alias $cmd="+ $cmd"
		done
	# }}}
	# Multitail aliases {{{
		alias tsys="+ multitail \
			-n 200 -t Daemons /var/log/daemon.log \
			-n 200 -t Kernel /var/log/kernel.log \
			-n 200 -t Auth -wh 10 /var/log/auth.log \
			-n 200 -t Errors -wh 10 /var/log/errors.log"

		alias tserv="+ multitail \
			-n 200 -t \"NginX Access\" /var/log/nginx/access.log \
			-n 200 -t \"NginX Error\" /var/log/nginx/error.log \
			-n 200 -t \"Postgres\" -wh 10 /var/log/postgresql.log"

		alias tsquid="+ multitail \
			-n 200 -t \"Squid Access\" /var/log/squid/access.log \
			-n 200 -t \"Squid Cache\" -wh 20 /var/log/squid/cache.log"
	# }}}
# }}}
# Completion {{{
	autoload -Uz compinit && compinit
	# SSH hosts completion {{{
		[ -f ~/.ssh/config ] && : ${(A)ssh_config_hosts:=${${${${(@M)${(f)"$(<~/.ssh/config)"}:#Host *}#Host }:#*\**}:#*\?*}}
		[ -f ~/.ssh/known_hosts ] && : ${(A)ssh_known_hosts:=${${${(f)"$(<$HOME/.ssh/known_hosts)"}%%\ *}%%,*}}
		zstyle ':completion:*:*:*' hosts $ssh_config_hosts $ssh_known_hosts
	# }}}
	# General rules {{{
		zstyle ':completion:*' completer _complete _ignored _match _approximate
		zstyle ":completion:*:match:*" original only
		zstyle ":completion:*:approximate:*" max-errors 1 numeric
		zstyle ':completion:*' expand prefix suffix
		zstyle ':completion:*' group-name ''
		zstyle ':completion:*' ignore-parents parent pwd .. directory
		zstyle ':completion:*' insert-unambiguous true
		zstyle ':completion:*' matcher-list ''
		zstyle ':completion:*' menu select=long
		zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
		zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
		zstyle ':completion:*' squeeze-slashes true
		zstyle ':completion::complete:*' use-cache 1
		zstyle ':completion::complete:*' cache-path ~/.zshcache
		zstyle ':completion:*:*:kill:*' menu yes select
		zstyle ":completion:*:kill:*" force-list always
		zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
		zstyle ':completion:*:*:killall:*:processes' command 'ps --forest -A -o pid,user,cmd'
		zstyle ':completion:*:processes-names' command 'ps axho command'
		zstyle ':completion:*:processes' command 'ps -au$USER -o pid,time,cmd|grep -v "ps -au$USER -o pid,time,cmd"'
		zstyle ':completion:*:cd:*' ignored-patterns '(*/)#lost+found'
		zstyle ':completion:*:matches' group yes
		zstyle ':completion:*:options' description yes
		zstyle ':completion:*:options' auto-description '%d'
		zstyle ':completion:*:descriptions' format $'\e[01;33m-- %d --\e[0m'
		zstyle ':completion:*:messages' format $'\e[01;35m-- %d --\e[0m'
		zstyle ':completion:*:warnings' format $'\e[01;31m-- no matches found --\e[0m'
		zstyle ':completion:*:manuals' separate-sections true
		zstyle ':completion:*:manuals.*' insert-sections   true
		zstyle ':completion:*:man:*' menu yes select
		zstyle ':completion:*:rm:*' ignore-line yes
		zstyle ':completion:*:cp:*' ignore-line yes
		zstyle ':completion:*:mv:*' ignore-line yes
	# }}}
	# Generic GNU compl. for apps that understang long options {{{
		compdef _gnu_generic slrnpull make df du mv cp makepkg
	# }}}
# }}}
# Root settings {{{
	if [[ $UID == 0 ]]; then
		# Close root shell after 180 seconds
		export TMOUT=180
	fi
# }}}
# Prompt {{{
	if [[ $TERM =~ '256color' ]]; then
		N_LINE=239
		C_RESET="%{[0m%}"
		C_BOLD_ON="%{[1m%}"
		C_BOLD_OFF="%{[22m%}"
		C_LINE="%{[48;5;0;38;5;${N_LINE}m%}"
		C_BRANCH_ICON="%{[38;5;246m%}"
		C_BRANCH="%{[38;5;231m%}"
		C_PWD_ICON="%{[38;5;248m%}"
		C_PWD="%{[48;5;${N_LINE};38;5;254m%}"
		C_AT="%{[38;5;244m%}"
		C_HOST="%{[38;5;250m%}"

		if [[ $UID -eq 0 ]]; then
		   C_USER="%{[1;38;5;160m%}"
		else
		   C_USER="%{[1;38;5;231m%}"
		fi

		autoload -Uz vcs_info

		function precmd {
			# Terminal width = width - 1 (for lineup)
			((TERMWIDTH=${COLUMNS} - 1))

			zstyle ':vcs_info:*' get-revision true
			zstyle ':vcs_info:*' check-for-changes true
			zstyle ':vcs_info:*' actionformats '%c%u|%s@%a:%b@%.5i'
			zstyle ':vcs_info:*' actionformats "${C_LINE}‚ÆÉ ${C_BOLD_OFF}${C_BRANCH_ICON}%a: ${C_BRANCH}%b@%.5i%F{white} ${C_LINE}${C_BOLD_ON}‚ÆÅ‚Æñ"
			zstyle ':vcs_info:*' stagedstr '%F{green}‚óè'
			zstyle ':vcs_info:*' unstagedstr '%F{yellow}‚óè'
			zstyle ':vcs_info:*' enable git

			if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
				zstyle ':vcs_info:*' formats "${C_LINE}‚ÆÉ ${C_BOLD_OFF}${C_BRANCH_ICON}‚≠† ${C_BRANCH}%b%c%u%F{white} ${C_LINE}${C_BOLD_ON}‚ÆÅ‚Æñ"
			else
				zstyle ':vcs_info:*' formats "${C_LINE}‚ÆÉ ${C_BOLD_OFF}${C_BRANCH_ICON}‚≠† ${C_BRANCH}%b%c%u%F{red}‚óè%F{white} ${C_LINE}${C_BOLD_ON}‚ÆÅ‚Æñ"
			fi

			vcs_info

			# Truncate long paths
			PR_FILLBAR=""
			PR_PWDLEN=""

			local VCSSIZE="${#${(S%%)vcs_info_msg_0_//(\%([KF1]|)\{*\}|\%[Bbkf])}}" # Trim ansi chars from VCS info
			local PROMPTSIZE="${#${(%):---( X %n@%m )---(  )--}}"
			local PWDSIZE="${#${(%):-%~}}"

			[[ $VCSSIZE -eq 1 ]] && VCSSIZE=0

			if [[ "${VCSSIZE} + ${PROMPTSIZE} + ${PWDSIZE}" -gt ${TERMWIDTH} ]]; then
				((PR_PWDLEN=${TERMWIDTH} - ${PROMPTSIZE}))
			else
				PR_FILLBAR="\${(l.((${TERMWIDTH} - (${VCSSIZE} + ${PROMPTSIZE} + ${PWDSIZE})))..‚Æñ.)}"
			fi
		}

		PROMPT='${C_BOLD_ON}${C_LINE}‚Æê‚Æñ‚ÆÇ${C_PWD} ${C_PWD_ICON}‚≠´ ${C_PWD}%$PR_PWDLEN<...<%~%<< ${C_BOLD_ON}${C_LINE}‚ÆÄ‚Æñ‚Æñ\
${(e)PR_FILLBAR}‚Æñ${vcs_info_msg_0_}${C_LINE}‚ÆÉ${C_BOLD_OFF}${C_USER} %n${C_AT}${C_BOLD_OFF}@${C_HOST}%m${C_BOLD_ON}${C_LINE} ‚ÆÅ‚Æñ‚Æí
${C_LINE}‚Æë‚Æñ‚Æî ${C_RESET}'

		RPROMPT='${C_BOLD_ON}${C_LINE}‚Æï‚Æñ‚Æì${C_RESET}'
	fi
	# List prompt - don't ask 'do you want to see all ...' in menu selection {{{
		LISTPROMPT=''
	# }}}
	# Spelling prompt {{{
		SPROMPT='zsh: correct '%R' to '%r'? ([Y]es/[N]o/[E]dit/[A]bort) '
	# }}}
# }}}
# ZLE stuff {{{
	# Smart dot (e.g. enter ..../dir) {{{
		smartdot(){
			if [[ $LBUFFER = *.. ]]; then
				LBUFFER+=/..
			else
				LBUFFER+=.
			fi
		}
		zle -N smartdot smartdot
		bindkey . smartdot
	# }}}
	# Quick add sudo {{{
		insert_sudo(){
			if [[ $LBUFFER != "sudo "* && $LBUFFER != '+ '* ]]; then
				LBUFFER="+ $LBUFFER"
			fi
		}
		zle -N insert-sudo insert_sudo
		bindkey "^[r" insert-sudo
	# }}}
	# Integrate ranger {{{
		integrate_ranger(){
			local before="$(pwd)"
			ranger $before <$TTY
			local after="$(grep \^\' ~/.ranger/bookmarks)"
			after[1,2]=
			if [[ $before != $after ]]; then
				cd $after
				print "ranger: $before -> $after"
			fi
			zle redisplay
			precmd
		}
		zle -N integrated-ranger integrate_ranger
		bindkey "^F" integrated-ranger
	# }}}
# }}}
# Enable stderred {{{
	if [[ -f "/usr/lib/libstderred.so" ]]; then
		export LD_PRELOAD="/usr/lib/libstderred.so:$LD_PRELOAD"
	fi
# }}}
