#!/usr/bin/python
# Author: Kim Silkebækken <kim.silkebaekken+github@gmail.com>
# Source: https://github.com/Lokaltog/sync

"""Lokaltog's status script for dwm"""

import re
import sys
import os
import urllib.request
import xml.dom.minidom
from datetime import datetime
from subprocess import *

def run_cmd(cmd):
	return Popen(cmd, stdout=PIPE).communicate()[0].decode("utf-8").strip()

def draw_bar(percent, bar_len=15):
	chars_empty = ("", "", "")
	chars_full = ("", "", "", "")
	full_len = round(percent / 100 * bar_len)
	bar = ""

	if not full_len:
		# empty bar
		bar += chars_empty[0]
		bar += chars_empty[1] * (bar_len - 1)
		bar += chars_empty[2]
	elif full_len == bar_len:
		# full bar
		bar += chars_full[0]
		bar += chars_full[1] * (bar_len - 1)
		bar += chars_full[2]
	else:
		# partial bar
		bar += chars_full[0]
		bar += chars_full[1] * (full_len - 1)
		bar += chars_full[3]
		bar += chars_empty[1] * (bar_len - full_len - 1)
		bar += chars_empty[2]

	return bar

def get_mpd():
	try:
		status = run_cmd(["timeout", "1s", "mpc"])
	except OSError:
		return ''

	if "playing" not in status or not status:
		status = "Not playing"
	else:
		status = status.split("\n")
		playing = status[0]
		percent = int(re.search("(\d+)%", status[1]).group(1))
		progress = draw_bar(percent)
		trim_len = 60

		if len(playing) > trim_len:
			playing = playing[:trim_len] + "..."

		(current, total) = re.findall("(\d+:\d+)", status[1])

		status = "{playing} ({total}) {progress} {current}".format(playing=playing, progress=progress, total=total, current=current)

	return "\x06 \x01{status} ".format(status=status)

def get_volume():
	try:
		amixer = run_cmd(["amixer", "get", "Master"])

		volume = int(re.search("\[(\d+)%\]", amixer).group(1))
		muted = re.search("\[(on|off)\]", amixer).group(1) == "off"
	except OSError:
		return ''
	except AttributeError:
		muted = True

	if muted:
		return "\x07 {volume} ".format(volume=draw_bar(0))

	icon = ""
	if volume < 50:
		icon = ""
	if volume < 10:
		icon = ""

	return "\x06{icon} \x01{volume} ".format(icon=icon, volume=draw_bar(volume))

def get_mail():
	unread = []
	hl = False

	try:
		for account in open(os.environ['XDG_CONFIG_HOME'] + '/gmailaccounts', encoding='utf-8'):
			(url, user, passwd) = account.split('|')

			auth_handler = urllib.request.HTTPBasicAuthHandler()
			auth_handler.add_password(realm='New mail feed', uri='https://mail.google.com/', user=user, passwd=passwd)
			opener = urllib.request.build_opener(auth_handler)
			urllib.request.install_opener(opener)

			request = urllib.request.urlopen(url)
			dom = xml.dom.minidom.parseString(request.read())
			count = dom.getElementsByTagName('fullcount')[0].childNodes[0].data

			if int(count) > 0:
				hl = True

			unread.append(count)
	except (IOError, ValueError, KeyError):
		return ''

	if hl:
		icon = "\x04  "
	else:
		icon = "\x06 \x01"

	return icon + ' / '.join(unread) + ' '

def get_date():
	date = datetime.now().strftime("%Y-%m-%d %R").split(" ")

	return "\x06{date}  {time}".format(date=date[0], time=date[1])

def get_notification():
	if len(sys.argv) > 1:
		return " \x04  {notification} ".format(notification=sys.argv[-1])

	return ""

print(
	get_mpd()    +
	get_volume() +
	get_mail()   +
	get_date()   +
	get_notification()
)
