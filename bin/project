#!/bin/sh
#
# Vim project management script.
#
# Software requirements:
#   * coffee-script (npm)
#   * coffee-toaster (npm)
#   * cscope
#   * ctags
#   * guard-livereload (gem)
#   * inotify-tools
#   * stylus (npm)
#   * uglify-js (npm)
#
# TODO Redirect script output to log files and show them in multitail
#
# Author: Kim Silkeb√¶kken <kim.silkebaekken+github@gmail.com>
# Source: https://github.com/Lokaltog/sync

ACTION=$1
TARGET_PATH=$2
IS_PRODUCTION=0

if [[ "$ACTION" != "init" && "$ACTION" != "watch" ]]; then
	echo "Usage: `basename "$0"` [init|watch] [path]"
	exit 1
fi

if [[ -z "$TARGET_PATH" ]]; then
	TARGET_PATH=`pwd`
fi

ask_install() {
	CMD="$2 $3"

	eval $1 >/dev/null 2>&1

	[[ $? -eq 0 ]] && return

	while true; do
		read -e -n 1 -p "'$3' is missing! Install with '$CMD' [y/n] " RET
		case $RET in
			[Yy]) $CMD;;
			[Nn]) echo "Required software missing!" && exit 2;;
			*)    echo "Please answer yes or no.";;
		esac
	done
}

ask_install "gem list guard-livereload | grep guard-livereload" "sudo gem install" "guard-livereload"
ask_install "which cscope" "sudo pacman -S" "cscope"
ask_install "which ctags" "sudo pacman -S" "ctags"
ask_install "which inotifywait" "sudo pacman -S" "inotify-tools"
ask_install "which stylus" "sudo npm install -g" "stylus"
ask_install "which toaster" "sudo npm install -g" "coffee-toaster"
ask_install "which uglifyjs" "sudo npm install -g" "uglifyjs"

TAGHIGHLIGHT="$HOME/sync/modules/taghighlight/plugin/TagHighlight/TagHighlight.py"
PROJECT_PATH="$TARGET_PATH/project"
PROJECT_LOCK="$PROJECT_PATH/project.lock"
PROJECT_PATHFILE="$XDG_CONFIG_HOME/projectpath"
PROJECT_CSCOPE="$PROJECT_PATH/cscope"

pushd "$TARGET_PATH" >/dev/null
TARGET_PATH=`pwd`

if [[ "$ACTION" == "init" ]]; then
	mkdir -p "$PROJECT_PATH"
	mkdir -p assets/{src/{js,css}/vendors,release/{js,css}}
elif [[ "$ACTION" == "watch" ]]; then
	echo -n "$TARGET_PATH" > $PROJECT_PATHFILE
	trap "echo \"Cleaning up...\";\
		rm -f \"$PROJECT_PATHFILE\" \"$PROJECT_CSCOPE.files\" \"$PROJECT_LOCK\";\
		exit" EXIT SIGHUP SIGINT SIGTERM

	build_tags() {
		echo "Building project tags..."

		python "$TAGHIGHLIGHT" -d "$TARGET_PATH" --ctags-file=project/tags --types-file-location=project

		find "$TARGET_PATH" \
				 ! -wholename "./.git/*" \
			-and ! -wholename "./.svn/*" \
			-and ! -wholename "./project/*" \
			-and ! -wholename "*logs*" \
			-and ! -wholename "*tmp*" \
			-and   -name "*.$1" \
			-print > "$PROJECT_CSCOPE.files"

		cscope \
			-i $PROJECT_CSCOPE.files \
			-f $PROJECT_CSCOPE.out \
			-b
	}

	parse_stylus() {
		echo "Compiling Stylus file"

		OUTFILE="`dirname $1`/../../release/css/`basename $1 .styl`.css"
		if [[ $IS_PRODUCTION -eq 1 ]]; then
			stylus -c <"$1" >"$OUTFILE"
		else
			stylus <"$1" >"$OUTFILE"
		fi

		gzip_file "$OUTFILE"
	}

	parse_coffee() {
		echo "Compiling CoffeeScript with toaster"

		TOASTER_FILES=`toaster`

		while IFS=$'\n' read -ra FILE; do
			read -ra FILE_SPLIT <<< "$FILE"
			FILE=${FILE_SPLIT[1]}

			echo "Compressing '$FILE' with uglifyjs"
			if [[ $IS_PRODUCTION -eq 1 ]]; then
				uglifyjs -d DEV=false --unsafe --mangle-toplevel --overwrite "$FILE"
			else
				uglifyjs -d DEV=true --no-mangle --no-squeeze --beautify --indent 4 --overwrite "$FILE"
			fi

			gzip_file "$FILE"
		done <<< "$TOASTER_FILES"
	}

	gzip_file() {
		echo "Gzipping '$1'"

		7z a -bd -tgzip -mx=9 -mpass=15 -y "$1.gz" "$1" >/dev/null 2>&1
	}

	inotifywait -mr --format "%w%f" -e close_write "$TARGET_PATH" | while read FILE; do
		FILE_EXT="${FILE##*.}"

		# Check that the project isn't locked
		[[ -e "$PROJECT_LOCK" ]] && continue

		case $FILE_EXT in
			"py")
				echo "Python file '$FILE' modified"
				touch "$PROJECT_LOCK"
				build_tags $FILE_EXT
				echo "Done!"
				rm "$PROJECT_LOCK"
				;;
			"styl" | "stylus")
				touch "$PROJECT_LOCK"
				echo "Stylus file '$FILE' modified"
				parse_stylus $FILE
				echo "Done!"
				rm "$PROJECT_LOCK"
				;;
			"coffee")
				touch "$PROJECT_LOCK"
				echo "CoffeeScript file '$FILE' modified"
				parse_coffee
				echo "Done!"
				rm "$PROJECT_LOCK"
				;;
		esac
	done
fi

popd >/dev/null
