" Author: Kim Silkeb√¶kken <kim.silkebaekken+github@gmail.com>
" Source: https://github.com/Lokaltog/sync
" Load pathogen {{{
	filetype off
	call pathogen#runtime_append_all_bundles()
" }}}
" Basic configuration {{{
	syntax on
	filetype plugin indent on

	set nocompatible
	set nobackup
	set nowritebackup
	set noswapfile
	set nomodeline
	set undofile
	set undodir=~/.vim/tmp
	set autochdir
	set backspace=indent,eol,start
	set fileformats=unix,dos
	set fileformat=unix
	set matchpairs+=<:>
	set shortmess=atToOI
	set iskeyword+=_,$,@,%,#
	set hidden
	set encoding=utf-8
	set termencoding=utf-8
	set title
	set clipboard=unnamed,unnamedplus,autoselect
	set autoread
	set report=0
	set gdefault
	" Instantly leave insert mode when pressing <Esc> {{{
		" This works by disabling the mapping timeout completely in normal mode,
		" and enabling it in insert mode with a very low timeout length.
		augroup fastescape
			autocmd!

			set notimeout
			set ttimeout
			set timeoutlen=10

			au InsertEnter * set timeout
			au InsertLeave * set notimeout
		augroup END
	" }}}
	" Define , as map leader {{{
		let mapleader = ','
	" }}}
	" Disable all bells {{{
		set noerrorbells visualbell t_vb=
	" }}}
	" Wild menu {{{
		set wildmenu
		set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif
		set wildmode=full
	" }}}
" }}}
" UI options {{{
	" URxvt-specific settings {{{
		if &term =~ "rxvt-256color"
			" Change cursor color in insert mode {{{
				silent !echo -ne "]12;\#dd4010\x7"

				let &t_SI="]12;\#89b6e2\x7"
				let &t_EI="]12;\#dd4010\x7"

				au VimLeave * silent !echo -ne "]12;\#dd4010\x7"
			" }}}
			" Use custom fillchars/listchars/showbreak icons {{{
				set fillchars=vert:ƒÅ,fold:ƒ∂,diff:ƒé
				set listchars=tab:ƒÄ\ ,trail:ƒñ,eol:ƒï
				set showbreak=ƒ¢ƒ£
			" }}}
			augroup List " {{{
				autocmd!
				" Set list on selected filetypes {{{
					au FileType vim,snippet setl list
					au FileType diff setl list listchars+=trail:\ " Disable trailing space chars
					au FileType sh,zsh,bash setl list
					au FileType html,css,sass,javascript,php,python,ruby,psql setl list
				" }}}
			augroup END " }}}
		endif
	" }}}
	" Set colorscheme {{{
		if &t_Co == 256
			colo distinguished
		else
			colo pablo
		endif
	" }}}
	if exists('+breakindent')
		set breakindent
	endif
	set laststatus=2
	set hlsearch
	set incsearch
	set nonumber
	set numberwidth=4
	set ruler
	set scrolloff=10
	set sidescrolloff=20
	set scrolljump=10
	set showcmd
	set noshowmode
	set virtualedit=block,onemore
	set confirm
	set updatetime=1500
	set history=1000
	set undolevels=1000
	set pumheight=10
	set diffopt+=context:3
" }}}
" Layout / Text formatting {{{
	set autoindent
	set wrap
	set textwidth=10000
	set formatoptions=croqwanl1
	set ignorecase
	set linebreak
	set shiftwidth=6
	set tabstop=6
	set smartcase
	set smartindent
	set nostartofline
	set completeopt=menu,menuone,longest
	set conceallevel=2
	" Highlight problematic whitespace (spaces before tabs) {{{
		hi RedundantSpaces ctermfg=214 ctermbg=160 cterm=bold
		match RedundantSpaces / \+\ze\t/
	" }}}
	" Conflict markers {{{
		" Highlight conflict markers
		match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

		" Shortcut to jump to next conflict marker
		nmap <silent> <leader>c /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>
	" }}}
" }}}
" Folding {{{
	set foldenable
	set foldmethod=marker
	set foldlevel=0
	set foldcolumn=0
	set foldtext=FoldText()
	" Universal FoldText function {{{
		function! FoldText(...)
			" This function uses code from doy's vim-foldtext: https://github.com/doy/vim-foldtext
			" Prepare fold variables {{{
				" Use function argument as line text if provided
				let l:line = a:0 > 0 ? a:1 : getline(v:foldstart)

				let l:line_count = v:foldend - v:foldstart + 1
				let l:indent = repeat(' ', indent(v:foldstart))

				let l:w_win = winwidth(0)
				let l:w_num = getwinvar(0, '&number') * getwinvar(0, '&numberwidth')
				let l:w_fold = getwinvar(0, '&foldcolumn')
			" }}}
			" Handle diff foldmethod {{{
				if &fdm == 'diff'
					let l:text = printf('«í %s matching lines «ì', l:line_count)

					" Center-align the foldtext
					return repeat('ƒÜ', (l:w_win - strchars(l:text) - l:w_num - l:w_fold) / 2) . l:text
				endif
			" }}}
			" Handle other foldmethods {{{
				let l:text = l:line
				" Remove foldmarkers {{{
					let l:foldmarkers = split(&foldmarker, ',')
					let l:text = substitute(l:text, '\V' . l:foldmarkers[0] . '\%(\d\+\)\?\s\*', '', '')
				" }}}
				" Remove comments {{{
					let l:comment = split(&commentstring, '%s')

					if l:comment[0] != ''
						let l:comment_begin = l:comment[0]
						let l:comment_end = ''

						if len(l:comment) > 1
							let l:comment_end = l:comment[1]
						endif

						let l:pattern = '\V' . l:comment_begin . '\s\*' . l:comment_end . '\s\*\$'

						if l:text =~ l:pattern
							let l:text = substitute(l:text, l:pattern, ' ', '')
						else
							let l:text = substitute(l:text, '.*\V' . l:comment_begin, ' ', '')

							if l:comment_end != ''
								let l:text = substitute(l:text, '\V' . l:comment_end, ' ', '')
							endif
						endif
					endif
				" }}}
				" Remove preceding non-word characters {{{
					let l:text = substitute(l:text, '^\W*', '', '')
				" }}}
				" Remove surrounding whitespace {{{
					let l:text = substitute(l:text, '^\s*\(.\{-}\)\s*$', '\1', '')
				" }}}
				" Make unmatched block delimiters prettier {{{
					let l:text = substitute(l:text, '([^)]*$',   'ƒò ƒµ ƒô', '')
					let l:text = substitute(l:text, '{[^}]*$',   'ƒò ƒµ ƒô', '')
					let l:text = substitute(l:text, '\[[^\]]*$', 'ƒò ƒµ ƒô', '')
				" }}}
				" Add arrows when indent level > 2 spaces {{{
					if indent(v:foldstart) > 2
						let l:cline = substitute(l:line, '^\s*\(.\{-}\)\s*$', '\1', '')
						let l:clen = strlen(matchstr(l:cline, '^\W*'))

						let l:indent = repeat(' ', indent(v:foldstart) - 2)
						let l:text = 'ƒ£ ' . l:text
					endif
				" }}}
				" Prepare fold text {{{
					let l:fnum = printf(' %s ƒë ', l:line_count)
					let l:ftext = printf('%s%s ', l:indent, l:text)
				" }}}
				return l:ftext . repeat('ƒ∂', l:w_win - strchars(l:fnum) - strchars(l:ftext) - l:w_num - l:w_fold) . l:fnum
			" }}}
		endfunction
	" }}}
	" PHP FoldText function {{{
		function! FoldText_PHP()
			" This function uses code from phpfolding.vim
			let l:curline = v:foldstart
			let l:line = getline(l:curline)
			" Did we fold a DocBlock? {{{
				if strridx(l:line, '#@+') != -1
					if (matchstr(l:line, '^.*#@+..*$') == l:line)
						let l:line = substitute(l:line, '^.*#@+', '', 'g') . ' ' . g:phpDocBlockIncludedPostfix
					else
						let l:line = getline(l:curline + 1) . ' ' . g:phpDocBlockIncludedPostfix
					endif
			" }}}
			" Did we fold an API comment block? {{{
				elseif strridx(l:line, "\/\*\*") != -1
					let s:state = 0

					while l:curline < v:foldend
						let l:loopline = getline(l:curline)

						if s:state == 0 && strridx(l:loopline, "\*\/") != -1
							let s:state = 1
						elseif s:state == 1 && (matchstr(l:loopline, '^\s*$') != l:loopline)
							break
						endif

						let l:curline = l:curline + 1
					endwhile

					let l:line = getline(l:curline)
				endif
			" }}}
			" Cleanup {{{
				let l:line = substitute(l:line, '/\*\|\*/\d\=', '', 'g')
				let l:line = substitute(l:line, '^\s*\*\?\s*', '', 'g')
				let l:line = substitute(l:line, '{$', '', 'g')
				let l:line = substitute(l:line, '($', '(...)', 'g')
			" }}}
			" Append postfix if there is PhpDoc in the fold {{{
				if l:curline != v:foldstart
					let l:line = l:line . " " . g:phpDocIncludedPostfix . " "
				endif
			" }}}
			return FoldText(l:line)
		endfunction
	" }}}
	" Enable PHP FoldText function {{{
		let g:DisableAutoPHPFolding = 1

		au FileType php EnableFastPHPFolds
		au FileType php set foldtext=FoldText() | setl foldtext=FoldText_PHP()
	" }}}
" }}}
" Mappings {{{
	" F key mappings {{{
		nnoremap <silent> <F6>  :set number!<CR>
		nnoremap <silent> <F7>  :LustyJuggler<CR>
		nnoremap <silent> <F8>  :TagbarToggle<CR>
		nnoremap <silent> <F9>  :LustyBufferExplorer<CR>
		nnoremap <silent> <F10> :NERDTreeToggle<CR>
		nnoremap <silent> <F11> :GundoToggle<CR>
	" }}}
	" Tabularize mappings {{{
		vnoremap <silent> <Leader>t> :Tabularize /=><CR>
		vnoremap <silent> <Leader>t= :Tabularize /=<CR>
		vnoremap <silent> <Leader>t, :Tabularize /,<CR>
	" }}}
	" Buffer mappings {{{
		nnoremap <silent> <Leader>d :bd<CR>
	" }}}
	" Quick edit .vimrc {{{
		nnoremap <silent> <Leader>ev :edit   $MYVIMRC<CR>
		nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>
	" }}}
	" Enter command mode quickly {{{
		nnoremap ; :
	" }}}
	" Navigate by visual lines {{{
		noremap k gk
		noremap j gj
	" }}}
	" Clear search highlighting {{{
		nnoremap <silent> <Leader>/ :nohlsearch<CR>
	" }}}
	" Sudo write {{{
		command! -bar -nargs=0 W  silent! exec "write !sudo tee % >/dev/null"  | silent! edit!
	" }}}
	" Write and make file executable {{{
		command! -bar -nargs=0 WX silent! exec "write !chmod a+x % >/dev/null" | silent! edit!
	" }}}
	" Fix broken vim regexes when searching {{{
		" http://stevelosh.com/blog/2010/09/coming-home-to-vim/#important-vimrc-lines
		nnoremap / /\v
		vnoremap / /\v
		cnoremap s/ s/\v
	" }}}
	" Easier bracket matching {{{
		nnoremap <Tab> %
	" }}}
	" Vertically split window and select it  {{{
		nnoremap <Leader>v <C-w>v<C-w>l
	" }}}
	" Easier split window navigation {{{
		nnoremap H <C-w>h
		nnoremap J <C-w>j
		nnoremap K <C-w>k
		nnoremap L <C-w>l
	" }}}
	" Repurpose arrow keys to move lines {{{
		" Inspired by http://jeetworks.com/node/89
		function! s:MoveLineUp()
			call <SID>MoveLineOrVisualUp(".", "")
		endfunction

		function! s:MoveLineDown()
			call <SID>MoveLineOrVisualDown(".", "")
		endfunction

		function! s:MoveVisualUp()
			call <SID>MoveLineOrVisualUp("'<", "'<,'>")
			normal gv
		endfunction

		function! s:MoveVisualDown()
			call <SID>MoveLineOrVisualDown("'>", "'<,'>")
			normal gv
		endfunction

		function! s:MoveLineOrVisualUp(line_getter, range)
			let l_num = line(a:line_getter)
			if l_num - v:count1 - 1 < 0
				let move_arg = "0"
			else
				let move_arg = a:line_getter." -".(v:count1 + 1)
			endif
			call <SID>MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
		endfunction

		function! s:MoveLineOrVisualDown(line_getter, range)
			let l_num = line(a:line_getter)
			if l_num + v:count1 > line("$")
				let move_arg = "$"
			else
				let move_arg = a:line_getter." +".v:count1
			endif
			call <SID>MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
		endfunction

		function! s:MoveLineOrVisualUpOrDown(move_arg)
			let col_num = virtcol(".")
			execute "silent! ".a:move_arg
			execute "normal! ".col_num."|"
		endfunction

		" Arrow key remapping:
		" Up/Dn = move line up/dn
		" Left/Right = indent/unindent
		function! SetArrowKeysAsTextShifters()
			" Normal mode
			nnoremap <silent> <Left>   <<
			nnoremap <silent> <Right>  >>
			nnoremap <silent> <Up>     <Esc>:call <SID>MoveLineUp()<CR>
			nnoremap <silent> <Down>   <Esc>:call <SID>MoveLineDown()<CR>

			" Visual mode
			vnoremap <silent> <Left>   <gv
			vnoremap <silent> <Right>  >gv
			vnoremap <silent> <Up>     <Esc>:call <SID>MoveVisualUp()<CR>
			vnoremap <silent> <Down>   <Esc>:call <SID>MoveVisualDown()<CR>

			" Insert mode
			inoremap <silent> <Left>   <C-D>
			inoremap <silent> <Right>  <C-T>
			inoremap <silent> <Up>     <C-O>:call <SID>MoveLineUp()<CR>
			inoremap <silent> <Down>   <C-O>:call <SID>MoveLineDown()<CR>
		endfunction

		call SetArrowKeysAsTextShifters()
	" }}}
	" Disable normal mode movement keys {{{
		noremap  <Home> <NOP>
		noremap  <End>  <NOP>
	" }}}
	" Mouse toggle {{{
		function! s:ToggleMouse()
			if !exists("old_mouse")
				let old_mouse = "ar"
			endif

			if &mouse == ""
				let &mouse = old_mouse
				set nopaste
				echo "Mouse is for VIM (" . &mouse . "), paste mode OFF"
			else
				let old_mouse = &mouse
				let &mouse = ""
				set paste
				echo "Mouse is for TERMINAL, paste mode ON"
			endif
		endfunction

		nnoremap <silent> <F12> :call <SID>ToggleMouse()<CR>
	" }}}
" }}}
" Autocommands {{{
	augroup General " {{{
		autocmd!
		" Custom psql highlighting {{{
			au BufNewFile,BufRead *.sql set ft=psql
		" }}}
		" Nginx highlighting {{{
			au BufNewFile,BufRead /etc/nginx/conf/* set ft=nginx
		" }}}
		" Script templates {{{
			au BufNewFile *.sh  so ~/.vim/templates/tpl.sh
			au BufNewFile *.py  so ~/.vim/templates/tpl.py
			au BufNewFile *.php so ~/.vim/templates/tpl.php
		" }}}
		" Help file settings {{{
			function! s:SetupHelpWindow()
				wincmd L
				vertical resize 80
				setl nonumber winfixwidth colorcolumn=

				let b:stl = "#[Branch] HELP#[BranchS] [>] #[FileName]%<%t #[FileNameS][>>]%* %=#[LinePercentS][<<]#[LinePercent] %p%% " " Set custom statusline

				nnoremap <buffer> <Space> <C-]> " Space selects subject
				nnoremap <buffer> <BS>    <C-T> " Backspace to go back
			endfunction

			au FileType help au BufEnter,BufWinEnter <buffer> call <SID>SetupHelpWindow()
		" }}}
		" Override SASS defaults {{{
			au FileType sass set sw=6 ts=6 noet
		" }}}
		" Disable Syntastic for selected filetypes {{{
			au FileType sass SyntasticDisable
		" }}}
		" Fix space highlighting in diff files {{{
			au FileType diff hi clear RedundantSpaces
				\ | hi DiffCol ctermbg=238 cterm=bold
				\ | match DiffCol /^[ +-]\([+-]\)\@!/
		" }}}
		" Load .Xdefaults/.Xresources on save {{{
			au BufWritePost,FileWritePost ~/.Xdefaults,~/.Xresources silent! !xrdb -load % >/dev/null 2>&1
		" }}}
		" Support Genshi templates {{{
			au FileType html set ft=genshi
		" }}}
	augroup END " }}}
	augroup Formatting " {{{
		autocmd!
		" Fix gitcommit formatting {{{
			au FileType gitcommit setl formatoptions+=t formatoptions-=l textwidth=72 colorcolumn=72
		" }}}
		" Format plain text and e-mails correctly {{{
			au BufNewFile,BufRead *.txt setl ft=text
			au FileType mail,text setl formatoptions+=t formatoptions-=l textwidth=72 colorcolumn=72
		" }}}
		" Use foldmarkers for specific filetypes {{{
			au FileType sass,javascript,psql,vim setl foldmethod=marker foldlevel=0
		" }}}
	augroup END" }}}
	augroup Whitespace " {{{
		autocmd!
		" Remove trailing whitespace from selected filetypes {{{
			function! s:StripTrailingWhitespace()
				normal mZ

				%s/\s\+$//e

				normal `Z
			endfunction

			au FileType html,css,sass,javascript,php,python,ruby,psql,vim au BufWritePre <buffer> :silent! call <SID>StripTrailingWhitespace()
		" }}}
	augroup END " }}}
	augroup VimFiles " {{{
		autocmd!

		au Filetype vim noremap <buffer> <F1> <Esc>:help <C-r><C-w><CR>
	augroup END " }}}
" }}}
" Plugin settings {{{
	" delimitMate settings {{{
		let g:delimitMate_expand_cr = 1
		let g:delimitMate_expand_space = 1
		let g:delimitMate_balance_matchpairs = 1
		let g:delimitMate_excluded_ft = "mail,help"
	" }}}
	" EasyMotion settings {{{
		let g:EasyMotion_keys = ";,.pyfgcrl/aoeuidhtns-'qjkxbmwvz"
	" }}}
	" PHP highlighting settings {{{
		let g:php_folding = 0
		let g:php_html_in_strings = 1
		let g:php_parent_error_close = 1
		let g:php_parent_error_open = 1
		let g:php_no_shorttags = 1
	" }}}
	" Python highlighting settings {{{
		let g:python_highlight_all = 1
		let g:python_show_sync = 1
		let g:python_print_as_function = 1
	" }}}
	" NERD tree settings {{{
		let g:NERDTreeChristmasTree = 1
		let g:NERDTreeCaseSensitiveSort = 1
		let g:NERDTreeQuitOnOpen = 1
		let g:NERDTreeWinPos = 'right'
		let g:NERDTreeWinSize = 50
		let g:NERDTreeShowBookmarks = 1
	" }}}
	" Tagbar settings {{{
		let g:tagbar_width = 50
		let g:tagbar_autoclose = 1
		let g:tagbar_autofocus = 1
		let g:tagbar_compact = 1
	" }}}
	" Syntastic settings {{{
		let g:syntastic_enable_signs = 1
		let g:syntastic_auto_loc_list = 0
	" }}}
	" Gundo settings {{{
		let g:gundo_right = 1
		let g:gundo_width = 50
	" }}}
	" UltiSnips settings {{{
		let g:UltiSnipsExpandTrigger = '<Tab>'
		let g:UltiSnipsListSnippets = '<S-Tab>'
		let g:UltiSnipsJumpForwardTrigger = '<C-l>'
		let g:UltiSnipsJumpBackwardTrigger = '<C-h>'
	" }}}
	" Sparkup settings {{{
		let g:sparkupExecuteMapping = '<C-E>'
		let g:sparkupNextMapping = '<C-U>'
	" }}}
" }}}
" Handle vim projects {{{
	let s:projectpath = system("cat $XDG_CONFIG_HOME/projectpath 2&>/dev/null")

	if ! empty(s:projectpath) && isdirectory(s:projectpath)
		let s:projectsessionfile = s:projectpath . "/vim/session.vim"

		let &path = s:projectpath . "/**," . &path
		let &tags = s:projectpath . "/vim/tags," . &tags
		let g:NERDTreeBookmarksFile = s:projectpath . "/vim/bookmarks"

		" CScope preferences {{{
			set nocsverb
			silent! exec "cd " . s:projectpath
			silent! exec "cscope add " . s:projectpath . "/vim/cscope.out"
			set csverb

			set cscopetag
			set cscopetagorder=0
		" }}}
		" Session options {{{
			set sessionoptions=blank,buffers,folds
			" Session handling functions {{{
				function! s:SessionException()
					" Vim called with arguments
					if argc() != 0
						return 1
					endif

					" Git commit messages
					if match(expand("%"), "\.git\/COMMIT") >= 0
						return 1
					endif

					return 0
				endfunction

				function! s:MakeSession()
					if s:SessionException() == 1
						return
					endif

					exec "mksession! " . s:projectsessionfile

					call writefile(
						\ [
							\ 'colorscheme ' . g:colors_name
						\ ],
						\ fnamemodify(s:projectsessionfile, ':p:r') . 'x.vim'
					\ )
				endfunction

				function! s:LoadSession()
					if s:SessionException()
						return
					endif

					" Check that file is readable
					if ! filereadable(s:projectsessionfile)
						return
					endif

					exec "source " . s:projectsessionfile
				endfunction
			" }}}
		" }}}
		augroup Project " {{{
			autocmd!
			" Highlight project tags {{{
				au BufReadPost,CursorHold *.php silent! exec "source " . s:projectpath . "/vim/tags.php-hl.vim"
			" }}}
			" Highlight project tags {{{
				au BufReadPost,CursorHold *.py  silent! exec "source " . s:projectpath . "/vim/tags.python-hl.vim"
			" }}}
			" Write/source session file {{{
				"au VimEnter * nested call s:LoadSession()
				"au VimLeave * call s:MakeSession()
			" }}}
		augroup END " }}}
	endif
" }}}
