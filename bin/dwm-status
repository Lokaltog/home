#!/usr/bin/python
"""Lokaltog's status script for dwm"""

import re
import sys
from datetime import datetime
from subprocess import *

def run_cmd(cmd):
	return Popen(cmd, stdout=PIPE).communicate()[0].decode("utf-8").strip()

def draw_bar(percent, bar_len=15):
	chars_empty = ("ò", "ô", "ö")
	chars_full = ("ó", "õ", "÷", "ð")
	full_len = round(percent / 100 * bar_len)
	bar = ""

	if not full_len:
		# empty bar
		bar += chars_empty[0]
		bar += chars_empty[1] * (bar_len - 1)
		bar += chars_empty[2]
	elif full_len == bar_len:
		# full bar
		bar += chars_full[0]
		bar += chars_full[1] * (bar_len - 1)
		bar += chars_full[2]
	else:
		# partial bar
		bar += chars_full[0]
		bar += chars_full[1] * (full_len - 1)
		bar += chars_full[3]
		bar += chars_empty[1] * (bar_len - full_len - 1)
		bar += chars_empty[2]

	return bar

def get_acpi():
	try:
		acpi = run_cmd(["acpi", "-V"])
	except OSError:
		return ''

	has_bat = False
	has_temp = False
	battery = ['', 'n/a']
	temperature = 0

	for line in acpi.split("\n"):
		split = re.split("\s+", line)
		if "Battery" in line and not has_bat:
			has_bat = True
			try:
				battery = [split[2][:-1], int(split[3].replace(',', '').replace('%', '')), split[4]]
			except IndexError:
				battery = [split[2][:-1], int(split[3].replace(',', '').replace('%', '')), False]
		elif "Thermal" in line and not has_temp:
			has_temp = True
			temperature = int(float(split[3]))

	baticon = "\x06Ï\x01"
	batpadding = ""

	if battery[0] == "Discharging":
		baticon = "\x06Î\x01"
		if battery[1] <= 25:
			baticon = "\x06Í\x01"
		if battery[1] <= 15:
			baticon = "\x03 Ì "
			batpadding = "\x01"
		baticon += "{0} ".format(battery[2])

	baticon += draw_bar(battery[1]) + batpadding

	tempicon = "\x06þ\x01"
	if temperature > 75:
		tempicon = "\x07þ "

	return "{baticon} {tempicon}{temp}°C ".format(baticon=baticon, tempicon=tempicon, temp=temperature)

def get_mpd():
	try:
		status = run_cmd(["timeout", "1s", "mpc", "-h", "10.0.0.110"])
	except OSError:
		return ''

	if "playing" not in status or not status:
		status = "Not playing"
	else:
		status = status.split("\n")
		playing = status[0]
		percent = int(re.search("(\d+)%", status[1]).groups()[0])
		progress = draw_bar(percent, bar_len=30)
		trim_len = 60

		if len(playing) > trim_len:
			playing = playing[:trim_len] + "..."

		total = re.search("/(\d+:\d+)", status[1]).groups()[0]

		status = "{playing} {progress} {total}".format(playing=playing, progress=progress, total=total)

	return "\x06î\x01{status} ".format(status=status)

def get_wifi():
	try:
		iwconfig = run_cmd(["iwconfig", "wlan0"])
		lquality = re.search("Link Quality=(\d+)/(\d+)", iwconfig).groups()
	except (OSError, AttributeError):
		return ""

	sigstrength = int(int(lquality[0]) / int(lquality[1]) * 100)

	return "\x06ï\x01{strength} ".format(strength=draw_bar(sigstrength))

def get_volume():
	try:
		amixer = run_cmd(["amixer", "get", "Master"])
	except OSError:
		return ''

	volume = int(re.search("\[(\d+)%\]", amixer).groups()[0])
	muted = re.search("\[(on|off)\]", amixer).groups()[0] == "off"

	if muted:
		return "\x07ê {volume} ".format(volume=draw_bar(0))

	icon = "í"
	if volume < 50:
		icon = "ì"
	if volume < 10:
		icon = "ë"

	return "\x06{icon}\x01{volume} ".format(icon=icon, volume=draw_bar(volume))

def get_date():
	date = datetime.now().strftime("%Y-%m-%d %R").split(" ")

	return "\x06{date} ù {time}".format(date=date[0], time=date[1])

def get_notification():
	if len(sys.argv) > 1:
		return " \x04 ÿ {notification} ".format(notification=sys.argv[-1])

	return ""

print(
	get_mpd()    +
	get_volume() +
	get_wifi()   +
	get_acpi()   +
	get_date()   +
	get_notification()
)
