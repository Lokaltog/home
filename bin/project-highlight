#!/usr/bin/env python

import argparse
import re
import sys

parser = argparse.ArgumentParser(description='Print a vim syntax highlighting file from a ctags tag file to stdout.')
parser.add_argument('tagfile', type=argparse.FileType('r'))
args = parser.parse_args()

class TagHighlighter:
	tag_kinds = {
		'c': 'Class',
		'i': 'Interface',
		'd': 'Constant',
		'f': 'Function',
		'v': 'Variable',
		'm': 'Member',
		}

	def __init__(self, tagfile):
		self.tagfile = tagfile.read()
		self.languages = {}

	def get_highlighting(self):
		ret = ''
		search_re = '(\w+).*?kind:([{0}]).*?language:({1})'.format(''.join(self.tag_kinds.keys()), '|'.join(self.languages.keys()))

		for line in self.tagfile.split('\n'):
			# Skip comment lines
			try:
				if line[0] == '!':
					continue
			except IndexError:
				continue

			try:
				tag, kind, language = re.search(search_re, line).groups()
			except AttributeError:
				continue

			self.languages[language].add_tag(kind, tag)

		for key, language in self.languages.items():
			for kind, tags in language.tags.items():
				if not len(tags):
					continue

				group = '{0}{1}Tag'.format(language.name, self.tag_kinds[kind])

				pat_prefix = language.patterns[kind]['prefix']
				pat_suffix = language.patterns[kind]['suffix']

				ret += 'try | syntax clear {group} | catch | endtry\nhi def link {group} {kind}\nsyn match {group} /{pre}\\%({tags}\\){suf}/ {props}\n'.format(
					group=group,
					kind=self.tag_kinds[kind],
					pre=pat_prefix,
					tags='\|'.join(tags),
					suf=pat_suffix,
					props=language.match_properties
					)

		return ret

	def add_language(self, name):
		lang = TagLanguage(name)

		self.languages[name] = lang

		return lang

class TagLanguage:
	def __init__(self, name):
		self.name = name
		self.tags = {key: set() for key in TagHighlighter.tag_kinds.keys()}
		self.patterns = {key: {'prefix': '\\C\\<', 'suffix': '\>'} for key in TagHighlighter.tag_kinds.keys()}
		self.match_properties = ''

	def add_tag(self, kind, tag):
		self.tags[kind].add(tag)

highlighter = TagHighlighter(args.tagfile)

python = highlighter.add_language('Python')

php = highlighter.add_language('PHP')
php.patterns['f']['suffix'] = '(\\@='
php.match_properties = 'contained containedin=phpRegion'

sys.stdout.write(highlighter.get_highlighting())
