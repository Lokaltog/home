#!/bin/sh
#
# Vim project management script.
#
# Software requirements:
#   * coffee-script (npm)
#   * coffee-toaster (npm)
#   * cscope
#   * ctags
#   * guard-livereload (gem)
#   * inotify-tools
#   * stylus (npm)
#   * uglify-js (npm)
#
# TODO Redirect script output to log files and show them in multitail
#
# Author: Kim Silkeb√¶kken <kim.silkebaekken+github@gmail.com>
# Source: https://github.com/Lokaltog/sync

ACTION=$1
TARGET_PATH=$2
IS_PRODUCTION=1
[[ "$ENV" == "dev" ]] && IS_PRODUCTION=0

if [[ "$ACTION" != "init" && "$ACTION" != "watch" ]]; then
	echo "Usage: `basename "$0"` [init|watch] [path]"
	exit 1
fi

if [[ -z "$TARGET_PATH" ]]; then
	TARGET_PATH=`pwd`
fi

ask_install() {
	CMD="$2 $3"

	eval $1 >/dev/null 2>&1

	[[ $? -eq 0 ]] && return

	while true; do
		read -e -n 1 -p "'$3' is missing! Install with '$CMD' [y/n] " RET
		case $RET in
			[Yy]) $CMD;;
			[Nn]) echo "Required software missing!" && exit 2;;
			*)    echo "Please answer yes or no.";;
		esac
	done
}

ask_install "gem list guard-livereload | grep guard-livereload" "sudo gem install" "guard-livereload"
ask_install "which cscope" "sudo pacman -S" "cscope"
ask_install "which ctags" "sudo pacman -S" "ctags"
ask_install "which inotifywait" "sudo pacman -S" "inotify-tools"
ask_install "which stylus" "sudo npm install -g" "stylus"
ask_install "which toaster" "sudo npm install -g" "coffee-toaster"
ask_install "which uglifyjs" "sudo npm install -g" "uglifyjs"

TAGHIGHLIGHT="$HOME/sync/modules/taghighlight/plugin/TagHighlight/TagHighlight.py"
PROJECT_PATH="$TARGET_PATH/project"
PROJECT_LOCK="$PROJECT_PATH/project.lock"
PROJECT_PATHFILE="$XDG_CONFIG_HOME/projectpath"
PROJECT_CSCOPE="$PROJECT_PATH/cscope"

pushd "$TARGET_PATH" >/dev/null
TARGET_PATH=`pwd`

# Status functions, based on the rc functions in Arch Linux {{{
	SAVE_POSITION="\e[s"
	RESTORE_POSITION="\e[u"
	DEL_TEXT="\e[0G"

	C_CLEAR=$(tput sgr0)
	C_MAIN=${C_CLEAR}$(tput bold)
	C_OTHER=${C_MAIN}$(tput setaf 4)
	C_SEPARATOR=${C_MAIN}$(tput setaf 0)
	C_BUSY=${C_CLEAR}$(tput setaf 6)
	C_FAIL=${C_MAIN}$(tput setaf 1)
	C_DONE=${C_MAIN}
	C_EVENT=${C_MAIN}$(tput setaf 5)
	C_H1=${C_MAIN}
	C_H2=${C_MAIN}$(tput setaf 6)

	printhl() {
		printf "        ${C_H1}${1}${C_CLEAR} \n"
	}
	printevent() {
		printf "        ${C_EVENT}${1}${C_CLEAR} \n"
	}
	printsep() {
		printf "\n${C_SEPARATOR}        ------------------------------\n\n"
	}
	stat_busy() {
		printf " ${C_OTHER}[${C_BUSY}BUSY${C_OTHER}]${C_CLEAR} "
		printf "${C_OTHER}${PREFIX_REG}${C_CLEAR}${1}"
		printf "${SAVE_POSITION}"
		printf "${DEL_TEXT}"
	}
	stat_done() {
		printf " ${C_OTHER}[${C_DONE}DONE${C_OTHER}]${C_CLEAR} \n"
		printf "${DEL_TEXT}"
	}
	stat_fail() {
		printf " ${C_OTHER}[${C_FAIL}FAIL${C_OTHER}]${C_CLEAR} \n"
		printf "${DEL_TEXT}"
	}
# }}}

if [[ "$ACTION" == "init" ]]; then
	ASSETS_PATH="assets"

	mkdir -p "$PROJECT_PATH"
	[[ ! `grep project .gitignore >/dev/null 2>&1` ]] && echo "project" >> .gitignore

	mkdir -p $ASSETS_PATH/{src/{js,css}/vendors,release/{js,css}}
	echo "module 'project'
	src: '$ASSETS_PATH/src/js'
	vendors: []
	release: '$ASSETS_PATH/release/js/main.js'" > toaster.coffee
	echo "*.css
*.css.gz" > $ASSETS_PATH/release/css/.gitignore
	echo "*.js
*.js.gz" > $ASSETS_PATH/release/js/.gitignore
	touch $ASSETS_PATH/src/js/main.coffee
	touch $ASSETS_PATH/src/css/main.styl

	echo "Project has been initialized in $PROJECT_PATH.

Remember to create a symlink to a WSGI file in the project folder if the WSGI
file to be touched doesn't end in .wsgi or is located in a parent folder."
elif [[ "$ACTION" == "watch" ]]; then
	echo -n "$TARGET_PATH" > $PROJECT_PATHFILE
	trap "rm -f \"$PROJECT_PATHFILE\" \"$PROJECT_CSCOPE.files\" \"$PROJECT_LOCK\";\
		exit" EXIT SIGHUP SIGINT SIGTERM

	build_tags() {
		stat_busy "Building project tags"

		python "$TAGHIGHLIGHT" -d "$TARGET_PATH" --ctags-file-dir=project \
			--types-file-location=project --include-locals

		find "$TARGET_PATH" \
				 ! -wholename "./.git/*" \
			-and ! -wholename "./.svn/*" \
			-and ! -wholename "./project/*" \
			-and ! -wholename "*logs*" \
			-and ! -wholename "*tmp*" \
			-and   -name "*.$1" \
			-print > "$PROJECT_CSCOPE.files"

		cscope \
			-i $PROJECT_CSCOPE.files \
			-f $PROJECT_CSCOPE.out \
			-b

		stat_done
	}

	parse_stylus() {
		stat_busy "Compiling Stylus file"

		OUTFILE="`dirname $1`/../../release/css/`basename $1 .styl`.css"
		if [[ $IS_PRODUCTION -eq 1 ]]; then
			stylus --include-css -u nib -c <"$1" >"$OUTFILE"
		else
			stylus --include-css -u nib <"$1" >"$OUTFILE"
		fi

		stat_done

		gzip_file "$OUTFILE"
	}

	parse_coffee() {
		stat_busy "Compiling CoffeeScript with Toaster"

		TOASTER_FILES=`toaster`

		stat_done

		while IFS=$'\n' read -ra FILE; do
			read -ra FILE_SPLIT <<< "$FILE"
			FILE=${FILE_SPLIT[1]}

			stat_busy "Compressing '$FILE' with UglifyJS"
			if [[ $IS_PRODUCTION -eq 1 ]]; then
				uglifyjs -d DEV=false --unsafe --mangle-toplevel --overwrite "$FILE"
			else
				uglifyjs -d DEV=true --no-mangle --no-squeeze --beautify --indent 4 --overwrite "$FILE"
			fi
			stat_done

			gzip_file "$FILE"
		done <<< "$TOASTER_FILES"
	}

	gzip_file() {
		stat_busy "Gzipping '$1'"

		7z a -bd -tgzip -mx=9 -mpass=15 -y "$1.gz" "$1" >/dev/null 2>&1

		stat_done
	}

	[[ ! -d "$PROJECT_PATH" ]] && mkdir $PROJECT_PATH

	# Look for wsgi script for reloading
	WSGI_FILE=`find -name '*.wsgi' | head -1`

	inotifywait -mr --format "%w%f" -e close_write "$TARGET_PATH" | while read FILE; do
		FILE_EXT="${FILE##*.}"

		[[ "$FILE" =~ "release" ]] && continue

		# Check that the project isn't locked
		[[ -e "$PROJECT_LOCK" ]] && continue

		case $FILE_EXT in
			"py")
				printsep
				printevent "Python file '$FILE' modified"
				touch "$PROJECT_LOCK"
				if [[ -f "$WSGI_FILE" ]]; then
					stat_busy 'Reloading WSGI server'
					touch "$WSGI_FILE"
					stat_done
				fi
				build_tags $FILE_EXT
				rm "$PROJECT_LOCK"
				;;
			"styl" | "stylus")
				printsep
				printevent "Stylus file '$FILE' modified"
				touch "$PROJECT_LOCK"
				$TARGET_PATH/assets/src/css/compile.sh
				rm "$PROJECT_LOCK"
				;;
			"js")
				printsep
				printevent "JS file '$FILE' modified"
				touch "$PROJECT_LOCK"
				$TARGET_PATH/assets/src/js/compile.sh
				rm "$PROJECT_LOCK"
				;;
		esac
	done
fi

popd >/dev/null
